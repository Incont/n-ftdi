/** Declaration file generated by dts-gen */

export class FTDI {
    constructor(...args: any[]);

    close(...args: any[]): void;

    closeSync(...args: any[]): void;

    getDeviceInfo(...args: any[]): void;

    getDeviceInfoSync(...args: any[]): void;

    getQueueStatus(...args: any[]): void;

    getQueueStatusSync(...args: any[]): void;

    getStatus(...args: any[]): void;

    getStatusSync(...args: any[]): void;

    openByDescription(...args: any[]): void;

    openByDescriptionSync(...args: any[]): void;

    openByIndex(...args: any[]): void;

    openByIndexSync(...args: any[]): void;

    openByLocation(...args: any[]): void;

    openByLocationSync(...args: any[]): void;

    openBySerialNumber(...args: any[]): void;

    openBySerialNumberSync(...args: any[]): void;

    read(...args: any[]): void;

    readFT232HEEPROM(...args: any[]): void;

    readFT232HEEPROMSync(...args: any[]): void;

    readSync(...args: any[]): void;

    setBaudRate(...args: any[]): void;

    setBaudRateSync(...args: any[]): void;

    setDataCharacteristics(...args: any[]): void;

    setDataCharacteristicsSync(...args: any[]): void;

    setFlowControl(...args: any[]): void;

    setFlowControlSync(...args: any[]): void;

    write(...args: any[]): void;

    writeSync(...args: any[]): void;

    static getDeviceList(...args: any[]): void;

    static getDeviceListSync(...args: any[]): void;

    static getNumberOfDevices(...args: any[]): void;

    static getNumberOfDevicesSync(...args: any[]): void;

}

export const FT_232H_CBUS_OPTIONS: {
    FT_CBUS_CLK15: number;
    FT_CBUS_CLK30: number;
    FT_CBUS_CLK7_5: number;
    FT_CBUS_DRIVE_0: number;
    FT_CBUS_DRIVE_1: number;
    FT_CBUS_IOMODE: number;
    FT_CBUS_PWREN: number;
    FT_CBUS_RXLED: number;
    FT_CBUS_SLEEP: number;
    FT_CBUS_TRISTATE: number;
    FT_CBUS_TXDEN: number;
    FT_CBUS_TXLED: number;
    FT_CBUS_TXRXLED: number;
};

export const FT_DATA_BITS: {
    FT_BITS_7: number;
    FT_BITS_8: number;
};

export const FT_DEVICE: {
    FT_DEVICE_100AX: number;
    FT_DEVICE_2232: number;
    FT_DEVICE_2232H: number;
    FT_DEVICE_232H: number;
    FT_DEVICE_232R: number;
    FT_DEVICE_4222H_0: number;
    FT_DEVICE_4222H_1_2: number;
    FT_DEVICE_4222H_3: number;
    FT_DEVICE_4222_PROG: number;
    FT_DEVICE_4232H: number;
    FT_DEVICE_AM: number;
    FT_DEVICE_BM: number;
    FT_DEVICE_UNKNOWN: number;
    FT_DEVICE_X_SERIES: number;
};

export const FT_DRIVE_CURRENT: {
    FT_DRIVE_CURRENT_12MA: number;
    FT_DRIVE_CURRENT_16MA: number;
    FT_DRIVE_CURRENT_4MA: number;
    FT_DRIVE_CURRENT_8MA: number;
};

export const FT_FLAGS: {
    FT_FLAGS_HISPEED: number;
    FT_FLAGS_OPENED: number;
};

export const FT_FLOW_CONTROL: {
    FT_FLOW_DTR_DSR: number;
    FT_FLOW_NONE: number;
    FT_FLOW_RTS_CTS: number;
    FT_FLOW_XON_XOFF: number;
};

export const FT_PARITY: {
    FT_PARITY_EVEN: number;
    FT_PARITY_MARK: number;
    FT_PARITY_NONE: number;
    FT_PARITY_ODD: number;
    FT_PARITY_SPACE: number;
};

/**
 * Status values for FTDI devices
 */
export const enum FT_STATUS {
    /**
     * Status OK
     */
    FT_OK = 0,
    /**
     * The device handle is invalid
     */
    FT_INVALID_HANDLE,
    /**
     * Device not found
     */
    FT_DEVICE_NOT_FOUND,
    /**
     * Device is not open
     */
    FT_DEVICE_NOT_OPENED,
    /**
     * IO error
     */
    FT_IO_ERROR,
    /**
     * Insufficient resources
     */
    FT_INSUFFICIENT_RESOURCES,
    /**
     * A parameter was invalid
     */
    FT_INVALID_PARAMETER,
    /**
     * The requested baud rate is invalid
     */
    FT_INVALID_BAUD_RATE,
    /**
     * Device not opened for erase
     */
    FT_DEVICE_NOT_OPENED_FOR_ERASE,
    /**
     * Device not poened for write
     */
    FT_DEVICE_NOT_OPENED_FOR_WRITE,
    /**
     * Failed to write to device
     */
    FT_FAILED_TO_WRITE_DEVICE,
    /**
     * Failed to read the device EEPROM
     */
    FT_EEPROM_READ_FAILED,
    /**
     * Failed to write the device EEPROM
     */
    FT_EEPROM_WRITE_FAILED,
    /**
     * Failed to erase the device EEPROM
     */
    FT_EEPROM_ERASE_FAILED,
    /**
     * An EEPROM is not fitted to the device
     */
    FT_EEPROM_NOT_PRESENT,
    /**
     * Device EEPROM is blank
     */
    FT_EEPROM_NOT_PROGRAMMED,
    /**
     * Invalid arguments
     */
    FT_INVALID_ARGS,
    /**
     * An other error has occurred
     */
    FT_OTHER_ERROR
};

export const FT_STOP_BITS: {
    FT_STOP_BITS_1: number;
    FT_STOP_BITS_2: number;
};

